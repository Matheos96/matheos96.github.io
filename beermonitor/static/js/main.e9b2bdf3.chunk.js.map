{"version":3,"sources":["components/Graph.js","services/temperatureService.js","App.js","index.js"],"names":["Graph","data","name","average","style","width","height","textAlign","options","maintainAspectRatio","title","display","text","fontSize","scales","yAxes","ticks","min","max","stepSize","getTwoDays","a","axios","get","response","App","useState","tempData","setTempData","tempAvg","setTempAvg","useEffect","then","result","tempTempData","labels","reverse","map","entry","ts","Date","timestamp","month","getMonth","day","getDate","hours","getHours","toString","length","minutes","getMinutes","datasets","label","temperature","fill","borderColor","avgTemp","reduce","tot","curr","toFixed","flexDirection","alignItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAuCeA,EArCD,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAMzB,OACI,sBAAKC,MANc,CACnBC,MAAO,MACPC,OAAO,MACPC,UAAW,UAGX,UAEA,cAAC,OAAD,CACEN,KAAMA,EACNO,QACI,CACAC,qBAAqB,EACrBC,MAAO,CACHC,SAAS,EACTC,KAAMV,EACNW,SAAU,IAEZC,OAAQ,CACNC,MAAO,CAAC,CACNC,MAAO,CACLC,IAAK,GACLC,IAAK,GACLC,SAAU,UAOpB,uBACA,2CAAchB,S,0CC7BbiB,EAAU,uCAAG,4BAAAC,EAAA,sEACCC,IAAMC,IAHrB,mDAEc,cAChBC,EADgB,yBAEfA,EAASvB,MAFM,2CAAH,qDCkDRwB,EAnDH,WAAO,IAAD,EAEgBC,mBAAS,IAFzB,mBAETC,EAFS,KAECC,EAFD,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,KA4ChB,OA/BAC,qBAAU,WACRX,IACGY,MAAK,SAAAC,GAEJ,IAAIC,EAAe,CACjBC,QAFFF,EAASA,EAAOG,WAECC,KAAI,SAAAC,GACjB,IAAIC,EAAK,IAAIC,KAAuB,IAAlBF,EAAMG,WACpBC,EAAQH,EAAGI,WAAa,EACxBC,EAAML,EAAGM,UACTC,EAA4C,IAApCP,EAAGQ,WAAWC,WAAWC,OAAzB,WAA4CV,EAAGQ,YAAeR,EAAGQ,WACzEG,EAAgD,IAAtCX,EAAGY,aAAaH,WAAWC,OAA3B,UAA6CV,EAAGY,aAAhD,KAAkEZ,EAAGY,aAEnF,MAAM,GAAN,OAAUP,EAAV,YAAiBF,EAAjB,YAA0BI,EAA1B,YAAmCI,MAGrCE,SAAU,CACR,CACEC,MAAO,eACPpD,KAAMgC,EAAOI,KAAI,SAAAC,GAAK,OAAIA,EAAMgB,eAChCC,MAAK,EACLC,YAAa,YAKbC,EAAUxB,EAAOyB,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAMC,EAAKN,cAAa,GAAKrB,EAAOgB,OACjFnB,EAAW,GAAD,OAAI2B,EAAQI,QAAQ,GAApB,OACVjC,EAAYM,QAEf,IAGD,qBAAK9B,MAxCgB,CACrBO,QAAS,OACTL,OAAQ,OACRD,MAAO,OACPyD,cAAe,SACfC,WAAY,UAmCZ,SACE,cAAC,EAAD,CAAO7D,KAAK,cAAcC,QAAS0B,EAAS5B,KAAM0B,O,OC7CxDqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e9b2bdf3.chunk.js","sourcesContent":["import { Line } from 'react-chartjs-2'\r\n\r\nconst Graph = ({ data, name, average }) => {\r\n    const chartContainer = {\r\n        width: '80%',\r\n        height:'70%',\r\n        textAlign: 'center'\r\n      }\r\n    return (\r\n        <div style={chartContainer}>\r\n        \r\n        <Line \r\n          data={data} \r\n          options={\r\n              { \r\n              maintainAspectRatio: false, \r\n              title: {\r\n                  display: true,\r\n                  text: name,\r\n                  fontSize: 40\r\n                },\r\n                scales: {\r\n                  yAxes: [{\r\n                    ticks: {\r\n                      min: 15,\r\n                      max: 30,\r\n                      stepSize: 0.5,\r\n                    }\r\n                  }]\r\n                }\r\n            }\r\n            } />\r\n\r\n            <br/>\r\n            <h2>Average: {average}</h2>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Graph","import axios from 'axios'\r\n\r\n//const URL = 'http://192.168.1.117:3001/beer/temperatures'\r\nconst URL = 'http://matheos.serverbeer.com/beer/temperatures'\r\n\r\nexport const getTwoDays = async () => {\r\n    const response = await axios.get(URL)\r\n    return response.data\r\n}","import { useEffect, useState } from 'react'\nimport Graph from './components/Graph'\nimport { getTwoDays } from './services/temperatureService'\n\nconst App = () => {\n\n  const [tempData, setTempData] = useState({})\n  const [tempAvg, setTempAvg] = useState('')\n\n  const containerStyle = {\n    display: 'flex',\n    height: '100%',\n    width: '100%',\n    flexDirection: 'column',\n    alignItems: 'center'\n  }\n\n  useEffect(() => {\n    getTwoDays()\n      .then(result => {\n        result = result.reverse()\n        let tempTempData = {\n          labels: result.map(entry => {\n            let ts = new Date(entry.timestamp * 1000)\n            let month = ts.getMonth() + 1\n            let day = ts.getDate()\n            let hours = ts.getHours().toString().length !== 2 ? `0${ts.getHours()}` : ts.getHours()\n            let minutes = ts.getMinutes().toString().length !== 2 ? `${ts.getMinutes()}0` : ts.getMinutes()\n\n            return `${day}/${month} ${hours}.${minutes}`\n\n          }),\n          datasets: [\n            {\n              label: 'temperatures',\n              data: result.map(entry => entry.temperature),\n              fill:false,\n              borderColor: 'orange'\n            }\n          ]\n        }\n\n        const avgTemp = result.reduce((tot, curr) => tot + curr.temperature, 0) / result.length\n        setTempAvg(`${avgTemp.toFixed(2)} C`)\n        setTempData(tempTempData)\n      })\n  }, [])\n\n  return (\n    <div style={containerStyle}>\n      <Graph name=\"Temperature\" average={tempAvg} data={tempData} />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}